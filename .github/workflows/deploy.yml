name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}

jobs:
  setup-build-publish-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ——————————————————————————————————————————
      # 1) Installer Flutter
      #    (nécessaire pour exécuter `flutter build web`)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_URL }}

      - name: Build and Push Backend
        run: |
          cd backend
          IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-api:${{ github.sha }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          docker tag "$IMAGE" "${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-api:latest"
          docker push "${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-api:latest"

      # ——————————————————————————————————————————
      # 2) Build Flutter Web AVANT le docker build du frontend
      - name: Build Flutter Web
        run: |
          cd frontend
          flutter pub get
          flutter build web

      - name: Build and Push Frontend
        run: |
          cd frontend
          IMAGE="${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-web:${{ github.sha }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          docker tag "$IMAGE" "${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-web:latest"
          docker push "${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-web:latest"

      - name: Setup Kubectl
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Deploy to GKE
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Créer le namespace si nécessaire
          kubectl create namespace artfans --dry-run=client -o yaml | kubectl apply -f -
          
          # Appliquer toutes les configurations
          kubectl apply -f kubernetes/configmap.yml
          kubectl apply -f kubernetes/backend/uploads-pvc.yml
          kubectl apply -f kubernetes/backend/deployment.yml
          kubectl apply -f kubernetes/backend/service.yml
          kubectl apply -f kubernetes/frontend/deployment.yml
          kubectl apply -f kubernetes/frontend/service.yml
          
          # Attendre que les deployments existent
          sleep 10
          
          # Mettre à jour les images
          kubectl set image deployment/artfans-api \
            api=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-api:${{ github.sha }} \
            -n artfans
          
          kubectl set image deployment/artfans-web \
            web=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/artfans/artfans-web:${{ github.sha }} \
            -n artfans
          
          # Vérifier le status
          kubectl rollout status deployment/artfans-api -n artfans --timeout=300s
          kubectl rollout status deployment/artfans-web -n artfans --timeout=300s
